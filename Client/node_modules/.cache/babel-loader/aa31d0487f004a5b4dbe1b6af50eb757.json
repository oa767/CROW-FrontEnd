{"ast":null,"code":"var _jsxFileName = \"/Users/randy/CROW-FrontEnd/src/pages/Chatroom/Chatroom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory, useParams } from 'react-router-dom';\nimport './chatroom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chatroom() {\n  _s();\n\n  const history = useHistory();\n  const params = useParams();\n  const roomID = params.roomID;\n  const username = localStorage.getItem('username');\n  const [data, setData] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isPrivate, setIsPrivate] = useState(JSON.parse(localStorage.getItem('privateRoom')));\n  const [isNewUser, setIsNewUser] = useState(JSON.parse(localStorage.getItem('newUser')));\n  const [isNewRoom, setIsNewRoom] = useState(true);\n  const ws = new WebSocket(\"wss://crow249.herokuapp.com/rooms/list\");\n\n  ws.onmessage = function (event) {\n    const response = JSON.parse(response.data);\n\n    try {\n      if (response.event = \"data\") {\n        setData(response.data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const joinRoom = async () => {\n    if (isPrivate && isNewUser && isNewRoom) {\n      await axios.post(`https://crow249.herokuapp.com/rooms/join/${roomID}/${username}`).then(response => {\n        console.log(response.data);\n        setIsNewUser(false);\n        localStorage.setItem('newUser', false);\n        setIsNewRoom(false);\n      }).catch(error => {\n        console.log(error);\n      });\n    } else if (isPrivate && isNewUser && !isNewRoom) {\n      await axios.post(`https://crow249.herokuapp.com/rooms/join/${roomID}/${username}`).then(response => {\n        console.log(response.data);\n        setIsNewUser(false);\n        localStorage.setItem('newUser', false);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n\n  const getRoomData = async () => {\n    await axios.get('https://crow249.herokuapp.com/rooms/list').then(response => {\n      for (var i = 0; i < response.data.length; ++i) {\n        if (response.data[i]._id.$oid == roomID) {\n          setData(response.data[i]);\n          console.log(response.data[i]);\n          setIsLoading(false);\n        }\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    joinRoom();\n    getRoomData();\n    const interval = setInterval(() => {\n      getRoomData();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content chatroom\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topBarContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"topBar\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"topBarTitle chatroom\",\n            onClick: () => history.push('/'),\n            children: \"Crow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"roomName\",\n            children: [\" \", data.room_name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 8\n          }, this), isPrivate && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"roomCode\",\n            children: [\" \", data._id.$oid, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content chatBody\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sideBarContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebarContent\",\n              children: data.list_users ? data.list_users.map((user, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\" \", user, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 23\n                }, this)\n              }, `${user}-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatWindow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatbar\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"chatInput\",\n              placeholder: \"Type a message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Chatroom, \"HGgljoAyIjapDpPBLdkRcbXUuK0=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Chatroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"sources":["/Users/randy/CROW-FrontEnd/src/pages/Chatroom/Chatroom.jsx"],"names":["React","useState","useEffect","axios","useHistory","useParams","Chatroom","history","params","roomID","username","localStorage","getItem","data","setData","undefined","isLoading","setIsLoading","isPrivate","setIsPrivate","JSON","parse","isNewUser","setIsNewUser","isNewRoom","setIsNewRoom","ws","WebSocket","onmessage","event","response","err","console","log","joinRoom","post","then","setItem","catch","error","getRoomData","get","i","length","_id","$oid","interval","setInterval","clearInterval","push","room_name","list_users","map","user","index"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport './chatroom.css';\n\nexport default function Chatroom() { \n  const history = useHistory();\n  const params = useParams();\n  const roomID = params.roomID;\n\n  const username = localStorage.getItem('username');\n\n  const [data, setData] = useState(undefined);\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isPrivate, setIsPrivate] = useState(JSON.parse(localStorage.getItem('privateRoom')));\n  const [isNewUser, setIsNewUser] = useState(JSON.parse(localStorage.getItem('newUser')));\n  const [isNewRoom, setIsNewRoom] = useState(true);\n\n  const ws = new WebSocket(\"wss://crow249.herokuapp.com/rooms/list\");\n\n  ws.onmessage = function (event) {\n    const response = JSON.parse(response.data);\n    try {\n      if((response.event = \"data\")) {\n        setData(response.data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const joinRoom = async() => {\n    if (isPrivate && isNewUser && isNewRoom) {\n      await axios.post(`https://crow249.herokuapp.com/rooms/join/${roomID}/${username}`)\n        .then((response) => {\n          console.log(response.data);\n\t  setIsNewUser(false);\n\t  localStorage.setItem('newUser', false);\n\t  setIsNewRoom(false);\n        })\n        .catch(error => {\n          console.log(error);\n        })\n    } else if (isPrivate && isNewUser && !isNewRoom) {\n      await axios.post(`https://crow249.herokuapp.com/rooms/join/${roomID}/${username}`)\n        .then((response) => {\n          console.log(response.data);\n\t  setIsNewUser(false);\n          localStorage.setItem('newUser', false);\n        })\n        .catch(error => {\n          console.log(error);\n        })\n    }\n  }\n  \n  const getRoomData = async() => {\n    await axios.get('https://crow249.herokuapp.com/rooms/list')\n      .then((response) => {\n\tfor (var i = 0; i < response.data.length; ++i) {\n          if (response.data[i]._id.$oid == roomID) {\n            setData(response.data[i]);\n            console.log(response.data[i]);\n            setIsLoading(false);\n          }\n        }\n      })\n      .catch(error => {\n\tconsole.log(error);\n      })\n  }\n\n  useEffect(() => {\n    joinRoom();\n    getRoomData();\n\n    const interval = setInterval(() => {\n      getRoomData();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <>\n      {!isLoading &&\n        <div className=\"content chatroom\">\n          <div className=\"topBarContainer\">\n            <div className=\"topBar\">\n              <button\n                className=\"topBarTitle chatroom\"\n                onClick={() => history.push('/')}\n              >\n                Crow\n              </button>\n\t      <div className=\"roomName\"> {data.room_name} </div>\n              {isPrivate && <div className=\"roomCode\"> {data._id.$oid} </div>}\n            </div>\n          </div>\n\t  <div className=\"content chatBody\">\n            <div className=\"sideBarContainer\">\n              <div className=\"sidebar\">\n                <div className=\"sidebarContent\">\n                  {data.list_users ? data.list_users.map((user, index) => (\n                    <div\n                      key={`${user}-${index}`}\n                    >\n                      <p> {user} </p>\n                    </div>\n                  )) : (\n                    <p></p>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"chatContainer\">\n              <div className=\"chatWindow\"></div>\n              <div className=\"chatbar\">\n                <input\n\t          className=\"chatInput\"\n                  placeholder=\"Type a message\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      }\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}