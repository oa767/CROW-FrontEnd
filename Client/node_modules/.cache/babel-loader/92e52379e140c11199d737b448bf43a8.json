{"ast":null,"code":"var _jsxFileName = \"/Users/randy/CROW-FrontEnd/src/pages/Chatroom/Chatroom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { setGlobalState, useGlobalState } from '../../state';\nimport { SocketContext } from '../../context/socket';\nimport './chatroom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chatroom() {\n  _s();\n\n  const history = useHistory();\n  const params = useParams();\n  const roomID = params.roomID;\n  const socket = useContext(SocketContext);\n  const [username, setUsername] = useGlobalState('username');\n  const [roomCode, setRoomCode] = useGlobalState('roomCode');\n  const [userId, setUserId] = useGlobalState('userId');\n  const [data, setData] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getRoomData = async () => {\n    await axios.get('https://crow249.herokuapp.com/rooms/list').then(response => {\n      if (response.data) {\n        for (var i = 0; i < response.data.length; ++i) {\n          if (response.data[i]._id.$oid == roomID) {\n            setData(response.data[i]);\n            console.log(response.data[i]);\n            setIsLoading(false);\n          }\n        }\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getRoomData();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content chatroom\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topBarContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"topBar\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"topBarTitle chatroom\",\n            onClick: () => history.push('/'),\n            children: \"Crow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"roomName\",\n            children: [\" \", data.room_name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content chatBody\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sideBarContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sidebar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebarContent\",\n              children: data.list_users ? data.list_users.map((user, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\" \", user, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 23\n                }, this)\n              }, `${user}-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatWindow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatbar\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"chatInput\",\n              placeholder: \"Type a message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Chatroom, \"U4wzQpR1WVb4qeXnm0mJdX2wUBk=\", false, function () {\n  return [useHistory, useParams, useGlobalState, useGlobalState, useGlobalState];\n});\n\n_c = Chatroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"sources":["/Users/randy/CROW-FrontEnd/src/pages/Chatroom/Chatroom.jsx"],"names":["React","useState","useEffect","useContext","axios","useHistory","useParams","io","setGlobalState","useGlobalState","SocketContext","Chatroom","history","params","roomID","socket","username","setUsername","roomCode","setRoomCode","userId","setUserId","data","setData","undefined","isLoading","setIsLoading","getRoomData","get","then","response","i","length","_id","$oid","console","log","catch","error","interval","setInterval","clearInterval","push","room_name","list_users","map","user","index"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\nimport axios from 'axios';\nimport {useHistory, useParams} from 'react-router-dom';\nimport {io} from 'socket.io-client';\nimport {setGlobalState, useGlobalState} from '../../state';\nimport {SocketContext} from '../../context/socket';\n\nimport './chatroom.css';\n\nexport default function Chatroom() { \n  const history = useHistory();\n  const params = useParams();\n  const roomID = params.roomID;\n\n  const socket = useContext(SocketContext);\n\n  const [username, setUsername] = useGlobalState('username');\n  const [roomCode, setRoomCode] = useGlobalState('roomCode');\n  const [userId, setUserId] = useGlobalState('userId');\n\n  const [data, setData] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getRoomData = async() => {\n    await axios.get('https://crow249.herokuapp.com/rooms/list')\n      .then((response) => {\n\tif (response.data) {\n\t  for (var i = 0; i < response.data.length; ++i) {\n            if (response.data[i]._id.$oid == roomID) {\n              setData(response.data[i]);\n              console.log(response.data[i]);\n              setIsLoading(false);\n            }\n\t  }\n        }\n      })\n      .catch(error => {\n\tconsole.log(error);\n      })\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getRoomData();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <>\n      {!isLoading &&\n        <div className=\"content chatroom\">\n          <div className=\"topBarContainer\">\n            <div className=\"topBar\">\n              <button\n                className=\"topBarTitle chatroom\"\n                onClick={() => history.push('/')}\n              >\n                Crow\n              </button>\n\t      <div className=\"roomName\"> {data.room_name} </div>\n            </div>\n          </div>\n\t  <div className=\"content chatBody\">\n            <div className=\"sideBarContainer\">\n              <div className=\"sidebar\">\n                <div className=\"sidebarContent\">\n                  {data.list_users ? data.list_users.map((user, index) => (\n                    <div\n                      key={`${user}-${index}`}\n                    >\n                      <p> {user} </p>\n                    </div>\n                  )) : (\n                    <p></p>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"chatContainer\">\n              <div className=\"chatWindow\"></div>\n              <div className=\"chatbar\">\n                <input\n\t          className=\"chatInput\"\n                  placeholder=\"Type a message\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      }\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}